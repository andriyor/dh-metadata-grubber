{
  "identity": {
    "id": "c4aa2e6d-f21a-4551-9184-725341431188",
    "name": "From:SQLServer",
    "description": "Conversion from MySQL data types to DifHub data types.Map used to import data from MySQL DDL to DifHub Dataset specification."
  },
  "version": {
    "major": 1,
    "minor": 0,
    "revision": 0
  },
  "object": {
    "parent": {
      "id": "c5135f7e-f0bf-4063-980f-14dc53e2e0fe",
      "name": "/organizations/Apdax/systems/DifHub/applications/Organization"
    },
    "picture": "",
    "tags": [],
    "documents": [],
    "contact": {
      "identity": {
        "description": ""
      },
      "url": "",
      "email": ""
    },
    "type": "DataSet",
    "usage": "Enum",
    "access": "External",
    "properties": [],
    "elements": [],
    "history": {
      "created": "2018-12-28T06:32:59.02",
      "createdBy": "sashaberger@hotmail.com",
      "updated": "2018-12-30T20:49:26.67",
      "updatedBy": "sashaberger@hotmail.com",
      "completions": [
        {
          "status": "Finalized",
          "completed": "2018-12-30T20:31:21.907",
          "completedBy": "sashaberger@hotmail.com",
          "completedByMessage": "/organizations/Apdax/systems/DifHub/applications/Organization/datasets/To:SQLServer/issues/3500/messages/5"
        },
        {
          "status": "Approved",
          "completed": "2018-12-30T20:49:26.47",
          "completedBy": "sashaberger@hotmail.com",
          "completedByMessage": "/organizations/Apdax/systems/DifHub/applications/Organization/datasets/To:SQLServer/issues/3500/messages/5"
        }
      ]
    },
    "lastApprovedVersion": {
      "major": 1,
      "minor": 0,
      "revision": 0
    }
  },
  "external": true,
  "structure": {
    "fields": [
      {
        "identity": {
          "id": "7be3d655-77d7-495c-84e1-436465a16204",
          "name": "Platform",
          "description": "Data type of source platform."
        },
        "order": 1,
        "usage": "Name",
        "type": "String",
        "size": 32,
        "optional": false,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "ecad25d6-b937-4e77-bbd9-0c39141f380f",
          "name": "Attribute",
          "description": "Additional attribute of the the type. "
        },
        "order": 2,
        "usage": "Property",
        "count": 1,
        "type": "String",
        "size": 32,
        "optional": true,
        "value": "",
        "format": "",
        "access": 255,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "3a5c4c4b-6433-403c-b8b7-8c9795a2fdbe",
          "name": "Description",
          "description": "Destination type of DifHub Dataset specification."
        },
        "order": 3,
        "usage": "Description",
        "type": "String",
        "size": 0,
        "optional": true,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "75208c3d-0614-426b-a5fa-6c296891eec9",
          "name": "Type",
          "description": "DifHub type for Dataset specification."
        },
        "order": 4,
        "usage": "Value",
        "count": 1,
        "type": "String",
        "size": 32,
        "optional": false,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "211be5ff-7b70-4a27-ac39-4c400ebaaa82",
          "name": "Length",
          "description": "Length of field based on source type."
        },
        "order": 5,
        "usage": "Property",
        "count": 1,
        "type": "Integer",
        "optional": true,
        "value": "Read",
        "format": "",
        "access": 0,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "c893630a-2ab1-42a0-aa9c-e86a3463dd84",
          "name": "Format",
          "description": "Format for DifHub specification based on source type."
        },
        "order": 6,
        "usage": "Property",
        "count": 1,
        "type": "String",
        "size": 255,
        "optional": true,
        "value": "",
        "format": "",
        "access": 255,
        "privacy": "low"
      }
    ],
    "keys": []
  },
  "layouts": [],
  "data": {
    "records": [
      {
        "index": 1,
        "values": [
          "bit(1)",
          "",
          "SQLServer does not have built-in Boolean type. However, it uses Bit(1) instead.",
          "Boolean",
          "",
          ""
        ]
      },
      {
        "index": 2,
        "values": [
          "tinyint",
          "",
          "One byte unsigned integer.",
          "Byte",
          "",
          ""
        ]
      },
      {
        "index": 3,
        "values": [
          "smallint",
          "",
          "Two bytes signed integer.",
          "Short",
          "",
          ""
        ]
      },
      {
        "index": 4,
        "values": [
          "int",
          "",
          "Four bytes signed integer.",
          "Integer",
          "",
          ""
        ]
      },
      {
        "index": 5,
        "values": [
          "bigint",
          "",
          "Eight bites signed integer.",
          "Long",
          "",
          ""
        ]
      },
      {
        "index": 6,
        "values": [
          "smallmoney",
          "",
          "The money and smallmoney data types are accurate to a ten-thousandth of the monetary units that they represent. For Informatica, the money and smallmoney data types are accurate to a one-hundredth of the monetary units that they represent.",
          "Unsigned Integer",
          "",
          ""
        ]
      },
      {
        "index": 7,
        "values": [
          "money",
          "",
          "The money and smallmoney data types are accurate to a ten-thousandth of the monetary units that they represent. For Informatica, the money and smallmoney data types are accurate to a one-hundredth of the monetary units that they represent.",
          "Money",
          "",
          ""
        ]
      },
      {
        "index": 8,
        "values": [
          "decimal",
          "",
          "decimal[ (p[ ,s] )] and numeric[ (p[ ,s] )]\nFixed precision and scale numbers. When maximum precision is used, valid values are from - 10^38 +1 through 10^38 - 1. The ISO synonyms for decimal are dec and dec(p, s). numeric is functionally equivalent to decimal.",
          "Decimal",
          "",
          ""
        ]
      },
      {
        "index": 9,
        "values": [
          "numeric",
          "",
          "decimal[ (p[ ,s] )] and numeric[ (p[ ,s] )]\nFixed precision and scale numbers. When maximum precision is used, valid values are from - 10^38 +1 through 10^38 - 1. The ISO synonyms for decimal are dec and dec(p, s). numeric is functionally equivalent to decimal.",
          "Decimal",
          "",
          ""
        ]
      },
      {
        "index": 10,
        "values": [
          "real",
          "",
          "Approximate-number data types for use with floating point numeric data. Floating point data is approximate; therefore, not all values in the data type range can be represented exactly. The ISO synonym for real is float(24).",
          "Float",
          "",
          ""
        ]
      },
      {
        "index": 11,
        "values": [
          "float",
          "",
          "Approximate-number data types for use with floating point numeric data. Floating point data is approximate; therefore, not all values in the data type range can be represented exactly. The ISO synonym for real is float(24).",
          "Double",
          "",
          ""
        ]
      },
      {
        "index": 12,
        "values": [
          "bit",
          "",
          "The SQL Server Database Engine optimizes storage of bit columns. If there are 8 or fewer bit columns in a table, the columns are stored as 1 byte. If there are from 9 up to 16 bit columns, the columns are stored as 2 bytes, and so on.",
          "Bit",
          "",
          ""
        ]
      },
      {
        "index": 13,
        "values": [
          "date",
          "",
          "Defines a date in SQL Server.",
          "Date",
          "",
          ""
        ]
      },
      {
        "index": 14,
        "values": [
          "datetime",
          "",
          "Defines a date that is combined with a time of day with fractional seconds that is based on a 24-hour clock",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 15,
        "values": [
          "datetime2",
          "",
          "efines a date that is combined with a time of day that is based on 24-hour clock. datetime2 can be considered as an extension of the existing datetime type that has a larger date range, a larger default fractional precision, and optional user-specified precision.",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 16,
        "values": [
          "time",
          "",
          "Defines a time of a day. The time is without time zone awareness and is based on a 24-hour clock.",
          "Time",
          "",
          ""
        ]
      },
      {
        "index": 17,
        "values": [
          "smalldatetime",
          "",
          "Defines a date that is combined with a time of day. The time is based on a 24-hour day, with seconds always zero (:00) and without fractional seconds.",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 18,
        "values": [
          "datetimeoffset",
          "",
          "Defines a date that is combined with a time of a day that has time zone awareness and is based on a 24-hour clock.",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 19,
        "values": [
          "uniqueidentifier",
          "",
          "Is a 16-byte GUID.",
          "Guid",
          "",
          ""
        ]
      },
      {
        "index": 20,
        "values": [
          "binary",
          "",
          "binary [ ( n ) ] Fixed-length binary data with a length of n bytes, where n is a value from 1 through 8,000. The storage size is n bytes.\n\nvarbinary [ ( n | max) ] Variable-length binary data. n can be a value from 1 through 8,000. max indicates that the maximum storage size is 2^31-1 bytes. The storage size is the actual length of the data entered + 2 bytes. The data that is entered can be 0 bytes in length. The ANSI SQL synonym for varbinary is binary varying.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 21,
        "values": [
          "varbinary",
          "",
          "binary [ ( n ) ] Fixed-length binary data with a length of n bytes, where n is a value from 1 through 8,000. The storage size is n bytes.\n\nvarbinary [ ( n | max) ] Variable-length binary data. n can be a value from 1 through 8,000. max indicates that the maximum storage size is 2^31-1 bytes. The storage size is the actual length of the data entered + 2 bytes. The data that is entered can be 0 bytes in length. The ANSI SQL synonym for varbinary is binary varying.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 22,
        "values": [
          "image",
          "",
          "image\nVariable-length binary data from 0 through 2^31-1 (2,147,483,647) bytes.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 23,
        "values": [
          "char",
          "",
          "Character data types that are either fixed-length, char, or variable-length, varchar. Starting with SQL Server 2019 preview, when a UTF-8 enabled collation is used, these data types store the full range of Unicode character data and use the UTF-8 character encoding. If a non-UTF-8 collation is specified, then these data types store only a subset of characters supported by the corresponding code page of that collation.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 24,
        "values": [
          "varchar",
          "",
          "Character data types that are either fixed-length, char, or variable-length, varchar. Starting with SQL Server 2019 preview, when a UTF-8 enabled collation is used, these data types store the full range of Unicode character data and use the UTF-8 character encoding. If a non-UTF-8 collation is specified, then these data types store only a subset of characters supported by the corresponding code page of that collation.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 25,
        "values": [
          "nchar",
          "",
          "Character data types that are either fixed-length, nchar, or variable-length, nvarchar. Starting with SQL Server 2012 (11.x), when a Supplementary Character (SC) enabled collation is used, these data types store the full range of Unicode character data and use the UTF-16 character encoding. If a non-SC collation is specified, then these data types store only the subset of character data supported by the UCS-2 character encoding.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 26,
        "values": [
          "nvarchar",
          "",
          "Character data types that are either fixed-length, nchar, or variable-length, nvarchar. Starting with SQL Server 2012 (11.x), when a Supplementary Character (SC) enabled collation is used, these data types store the full range of Unicode character data and use the UTF-16 character encoding. If a non-SC collation is specified, then these data types store only the subset of character data supported by the UCS-2 character encoding.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 27,
        "values": [
          "text",
          "",
          "text\nVariable-length non-Unicode data in the code page of the server and with a maximum string length of 2^31-1 (2,147,483,647). When the server code page uses double-byte characters, the storage is still 2,147,483,647 bytes. Depending on the character string, the storage size may be less than 2,147,483,647 bytes.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 28,
        "values": [
          "ntext",
          "",
          "Variable-length Unicode data with a maximum string length of 2^30 - 1 (1,073,741,823) bytes. Storage size, in bytes, is two times the string length that is entered. The ISO synonym for ntext is national text.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 30,
        "values": [
          "xml           ",
          "",
          "Is the data type that stores XML data. You can store xml instances in a column, or a variable of xml type.",
          "String",
          "0",
          "XML"
        ]
      }
    ],
    "examples": []
  }
}