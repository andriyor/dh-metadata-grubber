{
  "identity": {
    "id": "edca5df2-a681-4518-b728-bcad4ca927c9",
    "name": "From:MySQL",
    "description": "Conversion from MySQL data types to DifHub data types.Map used to import data from MySQL DDL to DifHub Dataset specification."
  },
  "version": {
    "major": 1,
    "minor": 1,
    "revision": 0
  },
  "object": {
    "parent": {
      "id": "c5135f7e-f0bf-4063-980f-14dc53e2e0fe",
      "name": "/organizations/Apdax/systems/DifHub/applications/Organization"
    },
    "picture": "",
    "tags": [],
    "documents": [],
    "contact": {
      "identity": {
        "description": ""
      },
      "url": "",
      "email": ""
    },
    "type": "DataSet",
    "usage": "Enum",
    "access": "External",
    "properties": [],
    "elements": [],
    "history": {
      "created": "2018-12-23T09:44:26.687",
      "createdBy": "sashaberger@hotmail.com",
      "updated": "2018-12-23T09:47:54.92",
      "updatedBy": "sashaberger@hotmail.com",
      "mirrored": "2018-12-23T06:35:03.25",
      "completions": [
        {
          "status": "Finalized",
          "completed": "2018-12-23T09:47:42.64",
          "completedBy": "sashaberger@hotmail.com",
          "completedByMessage": "/organizations/Apdax/systems/DifHub/applications/Organization/issues/3491/messages/2"
        },
        {
          "status": "Approved",
          "completed": "2018-12-23T09:47:54.78",
          "completedBy": "sashaberger@hotmail.com",
          "completedByMessage": "/organizations/Apdax/systems/DifHub/applications/Organization/issues/3491/messages/2"
        }
      ]
    },
    "lastApprovedVersion": {
      "major": 1,
      "minor": 1,
      "revision": 0
    }
  },
  "external": true,
  "structure": {
    "fields": [
      {
        "identity": {
          "id": "d7a01dbd-5258-46e2-8019-e6c23ef3909a",
          "name": "Source",
          "description": "Data type of source system.."
        },
        "order": 1,
        "usage": "Name",
        "type": "String",
        "size": 32,
        "optional": false,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "41f062d5-ba7f-42a1-b58a-3cec0bb5d79b",
          "name": "Attribute",
          "description": "Additional attribute of the the type. "
        },
        "order": 2,
        "usage": "Property",
        "count": 1,
        "type": "String",
        "size": 32,
        "optional": true,
        "value": "",
        "format": "",
        "access": 255,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "227286de-3601-462d-9b84-c4f74b96a7cb",
          "name": "Description",
          "description": "Destination type of DifHub Dataset specification."
        },
        "order": 3,
        "usage": "Description",
        "type": "String",
        "size": 0,
        "optional": true,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "f8b991ca-7941-4c61-ab9c-42c3b6363b19",
          "name": "Type",
          "description": "DifHub type for Dataset specification."
        },
        "order": 4,
        "usage": "Value",
        "count": 1,
        "type": "String",
        "size": 32,
        "optional": false,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "2e0772f4-5595-44b7-a30d-0404fd0a4d0e",
          "name": "Length",
          "description": "Length of field based on source type."
        },
        "order": 5,
        "usage": "Property",
        "count": 1,
        "type": "Integer",
        "optional": true,
        "value": "Read",
        "format": "",
        "access": 0,
        "privacy": "low"
      },
      {
        "identity": {
          "id": "09ed3505-92f3-4dd6-8646-5a639c151972",
          "name": "Format",
          "description": "Format for DifHub specification based on source type."
        },
        "order": 6,
        "usage": "Property",
        "count": 1,
        "type": "String",
        "size": 255,
        "optional": true,
        "value": "",
        "format": "",
        "access": 255,
        "privacy": "low"
      }
    ],
    "keys": []
  },
  "layouts": [],
  "data": {
    "records": [
      {
        "index": 1,
        "values": [
          "BOOL",
          "",
          "MySQL does not have built-in Boolean type. However, it uses TINYINT(1) instead. To make it more convenient, MySQL provides BOOLEAN or BOOL as the synonym of TINYINT(1).",
          "Boolean",
          "",
          ""
        ]
      },
      {
        "index": 2,
        "values": [
          "BOOLEAN",
          "",
          "MySQL does not have built-in Boolean type. However, it uses TINYINT(1) instead. To make it more convenient, MySQL provides BOOLEAN or BOOL as the synonym of TINYINT(1).",
          "Boolean",
          "",
          ""
        ]
      },
      {
        "index": 3,
        "values": [
          "TINYINT",
          "",
          "One byte signed integer.",
          "Small",
          "",
          ""
        ]
      },
      {
        "index": 4,
        "values": [
          "SMALLINT",
          "",
          "Two bytes signed integer.",
          "Short",
          "",
          ""
        ]
      },
      {
        "index": 5,
        "values": [
          "MEDIUMINT",
          "",
          "Three bytes signed integer.",
          "Medium",
          "",
          ""
        ]
      },
      {
        "index": 6,
        "values": [
          "INT",
          "",
          "Four bytes signed integer.",
          "Integer",
          "",
          ""
        ]
      },
      {
        "index": 7,
        "values": [
          "BIGINT",
          "",
          "Eight bites signed integer.",
          "Long",
          "",
          ""
        ]
      },
      {
        "index": 8,
        "values": [
          "TINYINT",
          "UNSIGNED",
          "One byte unsigned integer.",
          "Byte",
          "",
          ""
        ]
      },
      {
        "index": 9,
        "values": [
          "SMALLINT",
          "UNSIGNED",
          "Two bytes unsigned integer.",
          "Unsigned Short",
          "",
          ""
        ]
      },
      {
        "index": 10,
        "values": [
          "MEDIUMINT",
          "UNSIGNED",
          "Three bytes unsigned integer.",
          "Unsigned Integer",
          "",
          ""
        ]
      },
      {
        "index": 11,
        "values": [
          "INT",
          "UNSIGNED",
          "Four bytes unsigned integer.",
          "Unsigned Integer",
          "",
          ""
        ]
      },
      {
        "index": 12,
        "values": [
          "BIGINT",
          "UNSIGNED",
          "Eight bytes unsigned integer.",
          "Unsigned Long",
          "",
          ""
        ]
      },
      {
        "index": 13,
        "values": [
          "DECIMAL",
          "",
          "The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data. In MySQL, NUMERIC is implemented as DECIMAL, so the following remarks about DECIMAL apply equally to NUMERIC.",
          "Decimal",
          "",
          ""
        ]
      },
      {
        "index": 14,
        "values": [
          "NUMERIC",
          "",
          "The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data. In MySQL, NUMERIC is implemented as DECIMAL, so the following remarks about DECIMAL apply equally to NUMERIC.",
          "Decimal",
          "",
          ""
        ]
      },
      {
        "index": 15,
        "values": [
          "FLOAT",
          "",
          "The FLOAT and DOUBLE types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
          "Float",
          "",
          ""
        ]
      },
      {
        "index": 16,
        "values": [
          "REAL",
          "",
          "The FLOAT and DOUBLE types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
          "Double",
          "",
          ""
        ]
      },
      {
        "index": 17,
        "values": [
          "DOUBLE",
          "",
          "The FLOAT and DOUBLE types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
          "Double",
          "",
          ""
        ]
      },
      {
        "index": 18,
        "values": [
          "BIT",
          "",
          "The BIT data type is used to store bit values. A type of BIT(M) enables storage of M-bit values. M can range from 1 to 64.",
          "Bit",
          "",
          ""
        ]
      },
      {
        "index": 19,
        "values": [
          "DATE",
          "",
          "The DATE type is used for values with a date part but no time part. MySQL retrieves and displays DATE values in 'YYYY-MM-DD' format. The supported range is '1000-01-01' to '9999-12-31'.",
          "Date",
          "",
          ""
        ]
      },
      {
        "index": 20,
        "values": [
          "DATETIME",
          "",
          "The DATETIME type is used for values that contain both date and time parts. MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD HH:MM:SS' format. The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 21,
        "values": [
          "TIMESTAMP",
          "",
          "The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.",
          "DateTime",
          "",
          ""
        ]
      },
      {
        "index": 22,
        "values": [
          "TIME",
          "",
          "MySQL retrieves and displays TIME values in 'HH:MM:SS' format (or 'HHH:MM:SS' format for large hours values). TIME values may range from '-838:59:59' to '838:59:59'. The hours part may be so large because the TIME type can be used not only to represent a time of day (which must be less than 24 hours), but also elapsed time or a time interval between two events (which may be much greater than 24 hours, or even negative).",
          "Time",
          "",
          ""
        ]
      },
      {
        "index": 23,
        "values": [
          "YEAR",
          "",
          "The YEAR type is a 1-byte type used to represent year values. It can be declared as YEAR or YEAR(4) and has a display width of four characters.",
          "Byte",
          "",
          "YEAR"
        ]
      },
      {
        "index": 24,
        "values": [
          "CHAR",
          "",
          "The CHAR and VARCHAR types are similar, but differ in the way they are stored and retrieved. They also differ in maximum length and in whether trailing spaces are retained.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 25,
        "values": [
          "VARCHAR",
          "",
          "The CHAR and VARCHAR types are similar, but differ in the way they are stored and retrieved. They also differ in maximum length and in whether trailing spaces are retained.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 26,
        "values": [
          "BINARY",
          "",
          "The BINARY and VARBINARY types are similar to CHAR and VARCHAR, except that they contain binary strings rather than nonbinary strings. That is, they contain byte strings rather than character strings. This means they have the binary character set and collation, and comparison and sorting are based on the numeric values of the bytes in the values.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 27,
        "values": [
          "VARBINARY",
          "",
          "The BINARY and VARBINARY types are similar to CHAR and VARCHAR, except that they contain binary strings rather than nonbinary strings. That is, they contain byte strings rather than character strings. This means they have the binary character set and collation, and comparison and sorting are based on the numeric values of the bytes in the values.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 28,
        "values": [
          "TINYBLOB",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 29,
        "values": [
          "BLOB",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 30,
        "values": [
          "MEDIUMBLOB",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 31,
        "values": [
          "LONGBLOB",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "Binary",
          "0",
          ""
        ]
      },
      {
        "index": 32,
        "values": [
          "TINYTEXT",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 33,
        "values": [
          "TEXT",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 34,
        "values": [
          "MEDIUMTEXT",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 35,
        "values": [
          "LONGTEXT",
          "",
          "A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB. These differ only in the maximum length of the values they can hold. The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These correspond to the four BLOB types and have the same maximum lengths and storage requirements.",
          "String",
          "0",
          ""
        ]
      },
      {
        "index": 36,
        "values": [
          "ENUM",
          "",
          "An ENUM is a string object with a value chosen from a list of permitted values that are enumerated explicitly in the column specification at table creation time.",
          "Enum",
          "",
          ""
        ]
      },
      {
        "index": 37,
        "values": [
          "SET",
          "",
          "A SET is a string object that can have zero or more values, each of which must be chosen from a list of permitted values specified when the table is created.",
          "Enum",
          "",
          ""
        ]
      },
      {
        "index": 38,
        "values": [
          "JSON",
          "",
          "MySQL supports a native JSON data type defined by RFC 7159 that enables efficient access to data in JSON (JavaScript Object Notation) documents. ",
          "String",
          "0",
          "JSON"
        ]
      }
    ],
    "examples": []
  }
}